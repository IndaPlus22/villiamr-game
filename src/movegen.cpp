#include "movegen.hpp"


#include "movegen.hpp"


/* 
    SLIDING PIECE PATTERNS
    * Hashing function to get attack for a given square and occupancy
    * Uses magic bitboards to get attacks via massive lookup tables in MagicConstants.hpp
*/
Bitboard getBishopAttacks(int square, Bitboard occupancy){
    // get bishop attacks assuming current board occupancy
    occupancy &= bishopMasks[square];
    occupancy *= bishopMagics[square];
    occupancy >>= 64 - bishopBits[square];
    
    // return bishop attacks
    return bishopAttacks[square][occupancy];
}

Bitboard getRookAttacks(int square, Bitboard occupancy){
    // get bishop attacks assuming current board occupancy
    occupancy &= rookMasks[square];
    occupancy *= rookMagics[square];
    occupancy >>= 64 - rookBits[square];
    
    // return rook attacks
    return rookAttacks[square][occupancy];
}

/*
    PAWN PATTERNS
    * Gnerated via bitshifts
*/
template<Color color>
Bitboard pawnSinglePush (Bitboard pawns, Bitboard occupancy){
   return color == WHITE ? (pawns >> 8) & ~occupancy : (pawns << 8) & ~occupancy;
}

template<Color color>
Bitboard pawnDoublePush (Bitboard pawns, Bitboard occupancy){
    Bitboard singlePush = pawnSinglePush<color>(color == WHITE ? pawns & RANK_7 : pawns & RANK_2, occupancy);
    return color == WHITE ? (singlePush >> 8) & ~occupancy : (singlePush << 8) & ~occupancy;
}

template<Color color>
Bitboard pawnEastAttacks (Bitboard pawns, Bitboard enemy){
    return color == WHITE ? ((pawns & ~FILE_H) >> 7) & enemy : ((pawns & ~FILE_H) << 9) & enemy;
}

template<Color color>
Bitboard pawnWestAttacks (Bitboard pawns, Bitboard enemy){
    return color == WHITE ? ((pawns & ~FILE_A) >> 9) & enemy : ((pawns & ~FILE_A) << 7) & enemy;
}

template<Color color>
Bitboard pawnAttacks (Bitboard pawns,Bitboard enemy){
    return (pawnWestAttacks<color>(pawns,enemy)) | (pawnEastAttacks<color>(pawns,enemy));
}

/*
    LOOKUP TABLES for rays between two squares
*/
const Bitboard rayBetween [64][64] = {
{0x101010101010101, 0x0, 0x2, 0x6, 0xe, 0x1e, 0x3e, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100, 0x0, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10100, 0x0, 0x0, 0x40200, 0x0, 0x0, 0x0, 0x0, 0x1010100, 0x0, 0x0, 0x0, 0x8040200, 0x0, 0x0, 0x0, 0x101010100, 0x0, 0x0, 0x0, 0x0, 0x1008040200, 0x0, 0x0, 0x10101010100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x201008040200, 0x0, 0x1010101010100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40201008040200, },
{0x0, 0x202020202020202, 0x0, 0x4, 0xc, 0x1c, 0x3c, 0x7c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200, 0x0, 0x400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20200, 0x0, 0x0, 0x80400, 0x0, 0x0, 0x0, 0x0, 0x2020200, 0x0, 0x0, 0x0, 0x10080400, 0x0, 0x0, 0x0, 0x202020200, 0x0, 0x0, 0x0, 0x0, 0x2010080400, 0x0, 0x0, 0x20202020200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x402010080400, 0x0, 0x2020202020200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x2, 0x0, 0x404040404040404, 0x0, 0x8, 0x18, 0x38, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200, 0x0, 0x400, 0x0, 0x800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40400, 0x0, 0x0, 0x100800, 0x0, 0x0, 0x0, 0x0, 0x4040400, 0x0, 0x0, 0x0, 0x20100800, 0x0, 0x0, 0x0, 0x404040400, 0x0, 0x0, 0x0, 0x0, 0x4020100800, 0x0, 0x0, 0x40404040400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404040400, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x6, 0x4, 0x0, 0x808080808080808, 0x0, 0x10, 0x30, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400, 0x0, 0x800, 0x0, 0x1000, 0x0, 0x0, 0x20400, 0x0, 0x0, 0x80800, 0x0, 0x0, 0x201000, 0x0, 0x0, 0x0, 0x0, 0x8080800, 0x0, 0x0, 0x0, 0x40201000, 0x0, 0x0, 0x0, 0x808080800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80808080800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080800, 0x0, 0x0, 0x0, 0x0, },
{0xe, 0xc, 0x8, 0x0, 0x1010101010101010, 0x0, 0x20, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x800, 0x0, 0x1000, 0x0, 0x2000, 0x0, 0x0, 0x40800, 0x0, 0x0, 0x101000, 0x0, 0x0, 0x402000, 0x2040800, 0x0, 0x0, 0x0, 0x10101000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10101010101000, 0x0, 0x0, 0x0, },
{0x1e, 0x1c, 0x18, 0x10, 0x0, 0x2020202020202020, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000, 0x0, 0x2000, 0x0, 0x4000, 0x0, 0x0, 0x81000, 0x0, 0x0, 0x202000, 0x0, 0x0, 0x0, 0x4081000, 0x0, 0x0, 0x0, 0x20202000, 0x0, 0x0, 0x204081000, 0x0, 0x0, 0x0, 0x0, 0x2020202000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20202020202000, 0x0, 0x0, },
{0x3e, 0x3c, 0x38, 0x30, 0x20, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x102000, 0x0, 0x0, 0x404000, 0x0, 0x0, 0x0, 0x8102000, 0x0, 0x0, 0x0, 0x40404000, 0x0, 0x0, 0x408102000, 0x0, 0x0, 0x0, 0x0, 0x4040404000, 0x0, 0x20408102000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40404040404000, 0x0, },
{0x7e, 0x7c, 0x78, 0x70, 0x60, 0x40, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000, 0x0, 0x8000, 0x0, 0x0, 0x0, 0x0, 0x204000, 0x0, 0x0, 0x808000, 0x0, 0x0, 0x0, 0x10204000, 0x0, 0x0, 0x0, 0x80808000, 0x0, 0x0, 0x810204000, 0x0, 0x0, 0x0, 0x0, 0x8080808000, 0x0, 0x40810204000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808000, 0x2040810204000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80808080808000, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x200, 0x600, 0xe00, 0x1e00, 0x3e00, 0x7e00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000, 0x0, 0x20000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010000, 0x0, 0x0, 0x4020000, 0x0, 0x0, 0x0, 0x0, 0x101010000, 0x0, 0x0, 0x0, 0x804020000, 0x0, 0x0, 0x0, 0x10101010000, 0x0, 0x0, 0x0, 0x0, 0x100804020000, 0x0, 0x0, 0x1010101010000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20100804020000, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x400, 0xc00, 0x1c00, 0x3c00, 0x7c00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x0, 0x40000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2020000, 0x0, 0x0, 0x8040000, 0x0, 0x0, 0x0, 0x0, 0x202020000, 0x0, 0x0, 0x0, 0x1008040000, 0x0, 0x0, 0x0, 0x20202020000, 0x0, 0x0, 0x0, 0x0, 0x201008040000, 0x0, 0x0, 0x2020202020000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40201008040000, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200, 0x0, 0x404040404040404, 0x0, 0x800, 0x1800, 0x3800, 0x7800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x0, 0x40000, 0x0, 0x80000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040000, 0x0, 0x0, 0x10080000, 0x0, 0x0, 0x0, 0x0, 0x404040000, 0x0, 0x0, 0x0, 0x2010080000, 0x0, 0x0, 0x0, 0x40404040000, 0x0, 0x0, 0x0, 0x0, 0x402010080000, 0x0, 0x0, 0x4040404040000, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x600, 0x400, 0x0, 0x808080808080808, 0x0, 0x1000, 0x3000, 0x7000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000, 0x0, 0x80000, 0x0, 0x100000, 0x0, 0x0, 0x2040000, 0x0, 0x0, 0x8080000, 0x0, 0x0, 0x20100000, 0x0, 0x0, 0x0, 0x0, 0x808080000, 0x0, 0x0, 0x0, 0x4020100000, 0x0, 0x0, 0x0, 0x80808080000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080000, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe00, 0xc00, 0x800, 0x0, 0x1010101010101010, 0x0, 0x2000, 0x6000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80000, 0x0, 0x100000, 0x0, 0x200000, 0x0, 0x0, 0x4080000, 0x0, 0x0, 0x10100000, 0x0, 0x0, 0x40200000, 0x204080000, 0x0, 0x0, 0x0, 0x1010100000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010100000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10101010100000, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e00, 0x1c00, 0x1800, 0x1000, 0x0, 0x2020202020202020, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100000, 0x0, 0x200000, 0x0, 0x400000, 0x0, 0x0, 0x8100000, 0x0, 0x0, 0x20200000, 0x0, 0x0, 0x0, 0x408100000, 0x0, 0x0, 0x0, 0x2020200000, 0x0, 0x0, 0x20408100000, 0x0, 0x0, 0x0, 0x0, 0x202020200000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20202020200000, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e00, 0x3c00, 0x3800, 0x3000, 0x2000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000, 0x0, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x10200000, 0x0, 0x0, 0x40400000, 0x0, 0x0, 0x0, 0x810200000, 0x0, 0x0, 0x0, 0x4040400000, 0x0, 0x0, 0x40810200000, 0x0, 0x0, 0x0, 0x0, 0x404040400000, 0x0, 0x2040810200000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40404040400000, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e00, 0x7c00, 0x7800, 0x7000, 0x6000, 0x4000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400000, 0x0, 0x800000, 0x0, 0x0, 0x0, 0x0, 0x20400000, 0x0, 0x0, 0x80800000, 0x0, 0x0, 0x0, 0x1020400000, 0x0, 0x0, 0x0, 0x8080800000, 0x0, 0x0, 0x81020400000, 0x0, 0x0, 0x0, 0x0, 0x808080800000, 0x0, 0x4081020400000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80808080800000, },
{0x100, 0x0, 0x200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x20000, 0x60000, 0xe0000, 0x1e0000, 0x3e0000, 0x7e0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x2000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101000000, 0x0, 0x0, 0x402000000, 0x0, 0x0, 0x0, 0x0, 0x10101000000, 0x0, 0x0, 0x0, 0x80402000000, 0x0, 0x0, 0x0, 0x1010101000000, 0x0, 0x0, 0x0, 0x0, 0x10080402000000, 0x0, 0x0, },
{0x0, 0x200, 0x0, 0x400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x40000, 0xc0000, 0x1c0000, 0x3c0000, 0x7c0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000, 0x0, 0x4000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202000000, 0x0, 0x0, 0x804000000, 0x0, 0x0, 0x0, 0x0, 0x20202000000, 0x0, 0x0, 0x0, 0x100804000000, 0x0, 0x0, 0x0, 0x2020202000000, 0x0, 0x0, 0x0, 0x0, 0x20100804000000, 0x0, },
{0x200, 0x0, 0x400, 0x0, 0x800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x0, 0x404040404040404, 0x0, 0x80000, 0x180000, 0x380000, 0x780000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000, 0x0, 0x4000000, 0x0, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404000000, 0x0, 0x0, 0x1008000000, 0x0, 0x0, 0x0, 0x0, 0x40404000000, 0x0, 0x0, 0x0, 0x201008000000, 0x0, 0x0, 0x0, 0x4040404000000, 0x0, 0x0, 0x0, 0x0, 0x40201008000000, },
{0x0, 0x400, 0x0, 0x800, 0x0, 0x1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60000, 0x40000, 0x0, 0x808080808080808, 0x0, 0x100000, 0x300000, 0x700000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000000, 0x0, 0x8000000, 0x0, 0x10000000, 0x0, 0x0, 0x204000000, 0x0, 0x0, 0x808000000, 0x0, 0x0, 0x2010000000, 0x0, 0x0, 0x0, 0x0, 0x80808000000, 0x0, 0x0, 0x0, 0x402010000000, 0x0, 0x0, 0x0, 0x8080808000000, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x800, 0x0, 0x1000, 0x0, 0x2000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0000, 0xc0000, 0x80000, 0x0, 0x1010101010101010, 0x0, 0x200000, 0x600000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8000000, 0x0, 0x10000000, 0x0, 0x20000000, 0x0, 0x0, 0x408000000, 0x0, 0x0, 0x1010000000, 0x0, 0x0, 0x4020000000, 0x20408000000, 0x0, 0x0, 0x0, 0x101010000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10101010000000, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x1000, 0x0, 0x2000, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e0000, 0x1c0000, 0x180000, 0x100000, 0x0, 0x2020202020202020, 0x0, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0x0, 0x20000000, 0x0, 0x40000000, 0x0, 0x0, 0x810000000, 0x0, 0x0, 0x2020000000, 0x0, 0x0, 0x0, 0x40810000000, 0x0, 0x0, 0x0, 0x202020000000, 0x0, 0x0, 0x2040810000000, 0x0, 0x0, 0x0, 0x0, 0x20202020000000, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x2000, 0x0, 0x4000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0000, 0x3c0000, 0x380000, 0x300000, 0x200000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x0, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x1020000000, 0x0, 0x0, 0x4040000000, 0x0, 0x0, 0x0, 0x81020000000, 0x0, 0x0, 0x0, 0x404040000000, 0x0, 0x0, 0x4081020000000, 0x0, 0x0, 0x0, 0x0, 0x40404040000000, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x4000, 0x0, 0x8000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e0000, 0x7c0000, 0x780000, 0x700000, 0x600000, 0x400000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x2040000000, 0x0, 0x0, 0x8080000000, 0x0, 0x0, 0x0, 0x102040000000, 0x0, 0x0, 0x0, 0x808080000000, 0x0, 0x0, 0x8102040000000, 0x0, 0x0, 0x0, 0x0, 0x80808080000000, },
{0x10100, 0x0, 0x0, 0x20400, 0x0, 0x0, 0x0, 0x0, 0x10000, 0x0, 0x20000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x2000000, 0x6000000, 0xe000000, 0x1e000000, 0x3e000000, 0x7e000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100000000, 0x0, 0x200000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10100000000, 0x0, 0x0, 0x40200000000, 0x0, 0x0, 0x0, 0x0, 0x1010100000000, 0x0, 0x0, 0x0, 0x8040200000000, 0x0, 0x0, 0x0, },
{0x0, 0x20200, 0x0, 0x0, 0x40800, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x0, 0x40000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x4000000, 0xc000000, 0x1c000000, 0x3c000000, 0x7c000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000000, 0x0, 0x400000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20200000000, 0x0, 0x0, 0x80400000000, 0x0, 0x0, 0x0, 0x0, 0x2020200000000, 0x0, 0x0, 0x0, 0x10080400000000, 0x0, 0x0, },
{0x0, 0x0, 0x40400, 0x0, 0x0, 0x81000, 0x0, 0x0, 0x20000, 0x0, 0x40000, 0x0, 0x80000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000, 0x0, 0x404040404040404, 0x0, 0x8000000, 0x18000000, 0x38000000, 0x78000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000000, 0x0, 0x400000000, 0x0, 0x800000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40400000000, 0x0, 0x0, 0x100800000000, 0x0, 0x0, 0x0, 0x0, 0x4040400000000, 0x0, 0x0, 0x0, 0x20100800000000, 0x0, },
{0x40200, 0x0, 0x0, 0x80800, 0x0, 0x0, 0x102000, 0x0, 0x0, 0x40000, 0x0, 0x80000, 0x0, 0x100000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6000000, 0x4000000, 0x0, 0x808080808080808, 0x0, 0x10000000, 0x30000000, 0x70000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400000000, 0x0, 0x800000000, 0x0, 0x1000000000, 0x0, 0x0, 0x20400000000, 0x0, 0x0, 0x80800000000, 0x0, 0x0, 0x201000000000, 0x0, 0x0, 0x0, 0x0, 0x8080800000000, 0x0, 0x0, 0x0, 0x40201000000000, },
{0x0, 0x80400, 0x0, 0x0, 0x101000, 0x0, 0x0, 0x204000, 0x0, 0x0, 0x80000, 0x0, 0x100000, 0x0, 0x200000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe000000, 0xc000000, 0x8000000, 0x0, 0x1010101010101010, 0x0, 0x20000000, 0x60000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x800000000, 0x0, 0x1000000000, 0x0, 0x2000000000, 0x0, 0x0, 0x40800000000, 0x0, 0x0, 0x101000000000, 0x0, 0x0, 0x402000000000, 0x2040800000000, 0x0, 0x0, 0x0, 0x10101000000000, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x100800, 0x0, 0x0, 0x202000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100000, 0x0, 0x200000, 0x0, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e000000, 0x1c000000, 0x18000000, 0x10000000, 0x0, 0x2020202020202020, 0x0, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000000, 0x0, 0x2000000000, 0x0, 0x4000000000, 0x0, 0x0, 0x81000000000, 0x0, 0x0, 0x202000000000, 0x0, 0x0, 0x0, 0x4081000000000, 0x0, 0x0, 0x0, 0x20202000000000, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x201000, 0x0, 0x0, 0x404000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000, 0x0, 0x400000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e000000, 0x3c000000, 0x38000000, 0x30000000, 0x20000000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000000, 0x0, 0x4000000000, 0x0, 0x0, 0x0, 0x0, 0x102000000000, 0x0, 0x0, 0x404000000000, 0x0, 0x0, 0x0, 0x8102000000000, 0x0, 0x0, 0x0, 0x40404000000000, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x402000, 0x0, 0x0, 0x808000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400000, 0x0, 0x800000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e000000, 0x7c000000, 0x78000000, 0x70000000, 0x60000000, 0x40000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000000000, 0x0, 0x8000000000, 0x0, 0x0, 0x0, 0x0, 0x204000000000, 0x0, 0x0, 0x808000000000, 0x0, 0x0, 0x0, 0x10204000000000, 0x0, 0x0, 0x0, 0x80808000000000, },
{0x1010100, 0x0, 0x0, 0x0, 0x2040800, 0x0, 0x0, 0x0, 0x1010000, 0x0, 0x0, 0x2040000, 0x0, 0x0, 0x0, 0x0, 0x1000000, 0x0, 0x2000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x200000000, 0x600000000, 0xe00000000, 0x1e00000000, 0x3e00000000, 0x7e00000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000000, 0x0, 0x20000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010000000000, 0x0, 0x0, 0x4020000000000, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x2020200, 0x0, 0x0, 0x0, 0x4081000, 0x0, 0x0, 0x0, 0x2020000, 0x0, 0x0, 0x4080000, 0x0, 0x0, 0x0, 0x0, 0x2000000, 0x0, 0x4000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x400000000, 0xc00000000, 0x1c00000000, 0x3c00000000, 0x7c00000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000000, 0x0, 0x40000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2020000000000, 0x0, 0x0, 0x8040000000000, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x4040400, 0x0, 0x0, 0x0, 0x8102000, 0x0, 0x0, 0x0, 0x4040000, 0x0, 0x0, 0x8100000, 0x0, 0x0, 0x2000000, 0x0, 0x4000000, 0x0, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000000, 0x0, 0x404040404040404, 0x0, 0x800000000, 0x1800000000, 0x3800000000, 0x7800000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000000, 0x0, 0x40000000000, 0x0, 0x80000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040000000000, 0x0, 0x0, 0x10080000000000, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x8080800, 0x0, 0x0, 0x0, 0x10204000, 0x4020000, 0x0, 0x0, 0x8080000, 0x0, 0x0, 0x10200000, 0x0, 0x0, 0x4000000, 0x0, 0x8000000, 0x0, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x600000000, 0x400000000, 0x0, 0x808080808080808, 0x0, 0x1000000000, 0x3000000000, 0x7000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000000, 0x0, 0x80000000000, 0x0, 0x100000000000, 0x0, 0x0, 0x2040000000000, 0x0, 0x0, 0x8080000000000, 0x0, 0x0, 0x20100000000000, 0x0, },
{0x8040200, 0x0, 0x0, 0x0, 0x10101000, 0x0, 0x0, 0x0, 0x0, 0x8040000, 0x0, 0x0, 0x10100000, 0x0, 0x0, 0x20400000, 0x0, 0x0, 0x8000000, 0x0, 0x10000000, 0x0, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe00000000, 0xc00000000, 0x800000000, 0x0, 0x1010101010101010, 0x0, 0x2000000000, 0x6000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80000000000, 0x0, 0x100000000000, 0x0, 0x200000000000, 0x0, 0x0, 0x4080000000000, 0x0, 0x0, 0x10100000000000, 0x0, 0x0, 0x40200000000000, },
{0x0, 0x10080400, 0x0, 0x0, 0x0, 0x20202000, 0x0, 0x0, 0x0, 0x0, 0x10080000, 0x0, 0x0, 0x20200000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000, 0x0, 0x20000000, 0x0, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e00000000, 0x1c00000000, 0x1800000000, 0x1000000000, 0x0, 0x2020202020202020, 0x0, 0x4000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100000000000, 0x0, 0x200000000000, 0x0, 0x400000000000, 0x0, 0x0, 0x8100000000000, 0x0, 0x0, 0x20200000000000, 0x0, 0x0, },
{0x0, 0x0, 0x20100800, 0x0, 0x0, 0x0, 0x40404000, 0x0, 0x0, 0x0, 0x0, 0x20100000, 0x0, 0x0, 0x40400000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000, 0x0, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e00000000, 0x3c00000000, 0x3800000000, 0x3000000000, 0x2000000000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000000000, 0x0, 0x400000000000, 0x0, 0x0, 0x0, 0x0, 0x10200000000000, 0x0, 0x0, 0x40400000000000, 0x0, },
{0x0, 0x0, 0x0, 0x40201000, 0x0, 0x0, 0x0, 0x80808000, 0x0, 0x0, 0x0, 0x0, 0x40200000, 0x0, 0x0, 0x80800000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000, 0x0, 0x80000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e00000000, 0x7c00000000, 0x7800000000, 0x7000000000, 0x6000000000, 0x4000000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400000000000, 0x0, 0x800000000000, 0x0, 0x0, 0x0, 0x0, 0x20400000000000, 0x0, 0x0, 0x80800000000000, },
{0x101010100, 0x0, 0x0, 0x0, 0x0, 0x204081000, 0x0, 0x0, 0x101010000, 0x0, 0x0, 0x0, 0x204080000, 0x0, 0x0, 0x0, 0x101000000, 0x0, 0x0, 0x204000000, 0x0, 0x0, 0x0, 0x0, 0x100000000, 0x0, 0x200000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x20000000000, 0x60000000000, 0xe0000000000, 0x1e0000000000, 0x3e0000000000, 0x7e0000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000000000, 0x0, 0x2000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x202020200, 0x0, 0x0, 0x0, 0x0, 0x408102000, 0x0, 0x0, 0x202020000, 0x0, 0x0, 0x0, 0x408100000, 0x0, 0x0, 0x0, 0x202000000, 0x0, 0x0, 0x408000000, 0x0, 0x0, 0x0, 0x0, 0x200000000, 0x0, 0x400000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x40000000000, 0xc0000000000, 0x1c0000000000, 0x3c0000000000, 0x7c0000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000000000, 0x0, 0x4000000000000, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x404040400, 0x0, 0x0, 0x0, 0x0, 0x810204000, 0x0, 0x0, 0x404040000, 0x0, 0x0, 0x0, 0x810200000, 0x0, 0x0, 0x0, 0x404000000, 0x0, 0x0, 0x810000000, 0x0, 0x0, 0x200000000, 0x0, 0x400000000, 0x0, 0x800000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000000, 0x0, 0x404040404040404, 0x0, 0x80000000000, 0x180000000000, 0x380000000000, 0x780000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000000000, 0x0, 0x4000000000000, 0x0, 0x8000000000000, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x808080800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080000, 0x0, 0x0, 0x0, 0x1020400000, 0x402000000, 0x0, 0x0, 0x808000000, 0x0, 0x0, 0x1020000000, 0x0, 0x0, 0x400000000, 0x0, 0x800000000, 0x0, 0x1000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60000000000, 0x40000000000, 0x0, 0x808080808080808, 0x0, 0x100000000000, 0x300000000000, 0x700000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000000000000, 0x0, 0x8000000000000, 0x0, 0x10000000000000, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x1010101000, 0x0, 0x0, 0x0, 0x804020000, 0x0, 0x0, 0x0, 0x1010100000, 0x0, 0x0, 0x0, 0x0, 0x804000000, 0x0, 0x0, 0x1010000000, 0x0, 0x0, 0x2040000000, 0x0, 0x0, 0x800000000, 0x0, 0x1000000000, 0x0, 0x2000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0000000000, 0xc0000000000, 0x80000000000, 0x0, 0x1010101010101010, 0x0, 0x200000000000, 0x600000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8000000000000, 0x0, 0x10000000000000, 0x0, 0x20000000000000, 0x0, },
{0x1008040200, 0x0, 0x0, 0x0, 0x0, 0x2020202000, 0x0, 0x0, 0x0, 0x1008040000, 0x0, 0x0, 0x0, 0x2020200000, 0x0, 0x0, 0x0, 0x0, 0x1008000000, 0x0, 0x0, 0x2020000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1000000000, 0x0, 0x2000000000, 0x0, 0x4000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e0000000000, 0x1c0000000000, 0x180000000000, 0x100000000000, 0x0, 0x2020202020202020, 0x0, 0x400000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000000000, 0x0, 0x20000000000000, 0x0, 0x40000000000000, },
{0x0, 0x2010080400, 0x0, 0x0, 0x0, 0x0, 0x4040404000, 0x0, 0x0, 0x0, 0x2010080000, 0x0, 0x0, 0x0, 0x4040400000, 0x0, 0x0, 0x0, 0x0, 0x2010000000, 0x0, 0x0, 0x4040000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000000, 0x0, 0x4000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e0000000000, 0x3c0000000000, 0x380000000000, 0x300000000000, 0x200000000000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000000000, 0x0, 0x40000000000000, 0x0, },
{0x0, 0x0, 0x4020100800, 0x0, 0x0, 0x0, 0x0, 0x8080808000, 0x0, 0x0, 0x0, 0x4020100000, 0x0, 0x0, 0x0, 0x8080800000, 0x0, 0x0, 0x0, 0x0, 0x4020000000, 0x0, 0x0, 0x8080000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4000000000, 0x0, 0x8000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e0000000000, 0x7c0000000000, 0x780000000000, 0x700000000000, 0x600000000000, 0x400000000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000000000, 0x0, 0x80000000000000, },
{0x10101010100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20408102000, 0x0, 0x10101010000, 0x0, 0x0, 0x0, 0x0, 0x20408100000, 0x0, 0x0, 0x10101000000, 0x0, 0x0, 0x0, 0x20408000000, 0x0, 0x0, 0x0, 0x10100000000, 0x0, 0x0, 0x20400000000, 0x0, 0x0, 0x0, 0x0, 0x10000000000, 0x0, 0x20000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x2000000000000, 0x6000000000000, 0xe000000000000, 0x1e000000000000, 0x3e000000000000, 0x7e000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x20202020200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40810204000, 0x0, 0x20202020000, 0x0, 0x0, 0x0, 0x0, 0x40810200000, 0x0, 0x0, 0x20202000000, 0x0, 0x0, 0x0, 0x40810000000, 0x0, 0x0, 0x0, 0x20200000000, 0x0, 0x0, 0x40800000000, 0x0, 0x0, 0x0, 0x0, 0x20000000000, 0x0, 0x40000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x4000000000000, 0xc000000000000, 0x1c000000000000, 0x3c000000000000, 0x7c000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x40404040400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40404040000, 0x0, 0x0, 0x0, 0x0, 0x81020400000, 0x0, 0x0, 0x40404000000, 0x0, 0x0, 0x0, 0x81020000000, 0x0, 0x0, 0x0, 0x40400000000, 0x0, 0x0, 0x81000000000, 0x0, 0x0, 0x20000000000, 0x0, 0x40000000000, 0x0, 0x80000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2000000000000, 0x0, 0x404040404040404, 0x0, 0x8000000000000, 0x18000000000000, 0x38000000000000, 0x78000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x80808080800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80808080000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80808000000, 0x0, 0x0, 0x0, 0x102040000000, 0x40200000000, 0x0, 0x0, 0x80800000000, 0x0, 0x0, 0x102000000000, 0x0, 0x0, 0x40000000000, 0x0, 0x80000000000, 0x0, 0x100000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6000000000000, 0x4000000000000, 0x0, 0x808080808080808, 0x0, 0x10000000000000, 0x30000000000000, 0x70000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x101010101000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010100000, 0x0, 0x0, 0x0, 0x80402000000, 0x0, 0x0, 0x0, 0x101010000000, 0x0, 0x0, 0x0, 0x0, 0x80400000000, 0x0, 0x0, 0x101000000000, 0x0, 0x0, 0x204000000000, 0x0, 0x0, 0x80000000000, 0x0, 0x100000000000, 0x0, 0x200000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe000000000000, 0xc000000000000, 0x8000000000000, 0x0, 0x1010101010101010, 0x0, 0x20000000000000, 0x60000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202000, 0x0, 0x0, 0x100804020000, 0x0, 0x0, 0x0, 0x0, 0x202020200000, 0x0, 0x0, 0x0, 0x100804000000, 0x0, 0x0, 0x0, 0x202020000000, 0x0, 0x0, 0x0, 0x0, 0x100800000000, 0x0, 0x0, 0x202000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x100000000000, 0x0, 0x200000000000, 0x0, 0x400000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e000000000000, 0x1c000000000000, 0x18000000000000, 0x10000000000000, 0x0, 0x2020202020202020, 0x0, 0x40000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x201008040200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404000, 0x0, 0x0, 0x201008040000, 0x0, 0x0, 0x0, 0x0, 0x404040400000, 0x0, 0x0, 0x0, 0x201008000000, 0x0, 0x0, 0x0, 0x404040000000, 0x0, 0x0, 0x0, 0x0, 0x201000000000, 0x0, 0x0, 0x404000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000000000, 0x0, 0x400000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e000000000000, 0x3c000000000000, 0x38000000000000, 0x30000000000000, 0x20000000000000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x402010080400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808000, 0x0, 0x0, 0x402010080000, 0x0, 0x0, 0x0, 0x0, 0x808080800000, 0x0, 0x0, 0x0, 0x402010000000, 0x0, 0x0, 0x0, 0x808080000000, 0x0, 0x0, 0x0, 0x0, 0x402000000000, 0x0, 0x0, 0x808000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400000000000, 0x0, 0x800000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e000000000000, 0x7c000000000000, 0x78000000000000, 0x70000000000000, 0x60000000000000, 0x40000000000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x1010101010100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040810204000, 0x1010101010000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040810200000, 0x0, 0x1010101000000, 0x0, 0x0, 0x0, 0x0, 0x2040810000000, 0x0, 0x0, 0x1010100000000, 0x0, 0x0, 0x0, 0x2040800000000, 0x0, 0x0, 0x0, 0x1010000000000, 0x0, 0x0, 0x2040000000000, 0x0, 0x0, 0x0, 0x0, 0x1000000000000, 0x0, 0x2000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x200000000000000, 0x600000000000000, 0xe00000000000000, 0x1e00000000000000, 0x3e00000000000000, 0x7e00000000000000, },
{0x0, 0x2020202020200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2020202020000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4081020400000, 0x0, 0x2020202000000, 0x0, 0x0, 0x0, 0x0, 0x4081020000000, 0x0, 0x0, 0x2020200000000, 0x0, 0x0, 0x0, 0x4081000000000, 0x0, 0x0, 0x0, 0x2020000000000, 0x0, 0x0, 0x4080000000000, 0x0, 0x0, 0x0, 0x0, 0x2000000000000, 0x0, 0x4000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x400000000000000, 0xc00000000000000, 0x1c00000000000000, 0x3c00000000000000, 0x7c00000000000000, },
{0x0, 0x0, 0x4040404040400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404040000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404000000, 0x0, 0x0, 0x0, 0x0, 0x8102040000000, 0x0, 0x0, 0x4040400000000, 0x0, 0x0, 0x0, 0x8102000000000, 0x0, 0x0, 0x0, 0x4040000000000, 0x0, 0x0, 0x8100000000000, 0x0, 0x0, 0x2000000000000, 0x0, 0x4000000000000, 0x0, 0x8000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x200000000000000, 0x0, 0x404040404040404, 0x0, 0x800000000000000, 0x1800000000000000, 0x3800000000000000, 0x7800000000000000, },
{0x0, 0x0, 0x0, 0x8080808080800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080800000000, 0x0, 0x0, 0x0, 0x10204000000000, 0x4020000000000, 0x0, 0x0, 0x8080000000000, 0x0, 0x0, 0x10200000000000, 0x0, 0x0, 0x4000000000000, 0x0, 0x8000000000000, 0x0, 0x10000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x600000000000000, 0x400000000000000, 0x0, 0x808080808080808, 0x0, 0x1000000000000000, 0x3000000000000000, 0x7000000000000000, },
{0x0, 0x0, 0x0, 0x0, 0x10101010101000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10101010100000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10101010000000, 0x0, 0x0, 0x0, 0x8040200000000, 0x0, 0x0, 0x0, 0x10101000000000, 0x0, 0x0, 0x0, 0x0, 0x8040000000000, 0x0, 0x0, 0x10100000000000, 0x0, 0x0, 0x20400000000000, 0x0, 0x0, 0x8000000000000, 0x0, 0x10000000000000, 0x0, 0x20000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe00000000000000, 0xc00000000000000, 0x800000000000000, 0x0, 0x1010101010101010, 0x0, 0x2000000000000000, 0x6000000000000000, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x20202020202000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20202020200000, 0x0, 0x0, 0x10080402000000, 0x0, 0x0, 0x0, 0x0, 0x20202020000000, 0x0, 0x0, 0x0, 0x10080400000000, 0x0, 0x0, 0x0, 0x20202000000000, 0x0, 0x0, 0x0, 0x0, 0x10080000000000, 0x0, 0x0, 0x20200000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10000000000000, 0x0, 0x20000000000000, 0x0, 0x40000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e00000000000000, 0x1c00000000000000, 0x1800000000000000, 0x1000000000000000, 0x0, 0x2020202020202020, 0x0, 0x4000000000000000, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40404040404000, 0x0, 0x20100804020000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40404040400000, 0x0, 0x0, 0x20100804000000, 0x0, 0x0, 0x0, 0x0, 0x40404040000000, 0x0, 0x0, 0x0, 0x20100800000000, 0x0, 0x0, 0x0, 0x40404000000000, 0x0, 0x0, 0x0, 0x0, 0x20100000000000, 0x0, 0x0, 0x40400000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000000000000, 0x0, 0x40000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e00000000000000, 0x3c00000000000000, 0x3800000000000000, 0x3000000000000000, 0x2000000000000000, 0x0, 0x4040404040404040, 0x0, },
{0x40201008040200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80808080808000, 0x0, 0x40201008040000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80808080800000, 0x0, 0x0, 0x40201008000000, 0x0, 0x0, 0x0, 0x0, 0x80808080000000, 0x0, 0x0, 0x0, 0x40201000000000, 0x0, 0x0, 0x0, 0x80808000000000, 0x0, 0x0, 0x0, 0x0, 0x40200000000000, 0x0, 0x0, 0x80800000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40000000000000, 0x0, 0x80000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7e00000000000000, 0x7c00000000000000, 0x7800000000000000, 0x7000000000000000, 0x6000000000000000, 0x4000000000000000, 0x0, 0x8080808080808080, }};
const Bitboard extendedRayBetween[64][64] = {
{0x101010101010101, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x101010101010101, 0x201, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x40201, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x8040201, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x1008040201, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x201008040201, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40201008040201, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040201008040201, },
{0xff, 0x202020202020202, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x102, 0x202020202020202, 0x402, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x80402, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x10080402, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x2010080402, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x402010080402, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80402010080402, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0xff, 0xff, 0x404040404040404, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x204, 0x404040404040404, 0x804, 0x0, 0x0, 0x0, 0x0, 0x10204, 0x0, 0x404040404040404, 0x0, 0x100804, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x20100804, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x4020100804, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x804020100804, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0xff, 0xff, 0xff, 0x808080808080808, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x408, 0x808080808080808, 0x1008, 0x0, 0x0, 0x0, 0x0, 0x20408, 0x0, 0x808080808080808, 0x0, 0x201008, 0x0, 0x0, 0x1020408, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x40201008, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x8040201008, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, },
{0xff, 0xff, 0xff, 0xff, 0x1010101010101010, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0x810, 0x1010101010101010, 0x2010, 0x0, 0x0, 0x0, 0x0, 0x40810, 0x0, 0x1010101010101010, 0x0, 0x402010, 0x0, 0x0, 0x2040810, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x80402010, 0x102040810, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, },
{0xff, 0xff, 0xff, 0xff, 0xff, 0x2020202020202020, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x1020, 0x2020202020202020, 0x4020, 0x0, 0x0, 0x0, 0x0, 0x81020, 0x0, 0x2020202020202020, 0x0, 0x804020, 0x0, 0x0, 0x4081020, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x204081020, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x10204081020, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, },
{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4040404040404040, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040, 0x4040404040404040, 0x8040, 0x0, 0x0, 0x0, 0x0, 0x102040, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x8102040, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x408102040, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x20408102040, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x1020408102040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, },
{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4080, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x204080, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x10204080, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x810204080, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x40810204080, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x2040810204080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x102040810204080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, },
{0x101010101010101, 0x102, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x101010101010101, 0x20100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x4020100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x804020100, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x100804020100, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x20100804020100, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4020100804020100, 0x0, },
{0x8040201008040201, 0x202020202020202, 0x10204, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff00, 0x202020202020202, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x10204, 0x202020202020202, 0x40201, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x8040201, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x1008040201, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x201008040201, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x40201008040201, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040201008040201, },
{0x0, 0x80402010080402, 0x404040404040404, 0x1020408, 0x0, 0x0, 0x0, 0x0, 0xff00, 0xff00, 0x404040404040404, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x0, 0x20408, 0x404040404040404, 0x80402, 0x0, 0x0, 0x0, 0x0, 0x1020408, 0x0, 0x404040404040404, 0x0, 0x10080402, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x2010080402, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x402010080402, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x80402010080402, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x804020100804, 0x808080808080808, 0x102040810, 0x0, 0x0, 0x0, 0xff00, 0xff00, 0xff00, 0x808080808080808, 0xff00, 0xff00, 0xff00, 0xff00, 0x0, 0x0, 0x40810, 0x808080808080808, 0x100804, 0x0, 0x0, 0x0, 0x0, 0x2040810, 0x0, 0x808080808080808, 0x0, 0x20100804, 0x0, 0x0, 0x102040810, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x4020100804, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x804020100804, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x8040201008, 0x1010101010101010, 0x10204081020, 0x0, 0x0, 0xff00, 0xff00, 0xff00, 0xff00, 0x1010101010101010, 0xff00, 0xff00, 0xff00, 0x0, 0x0, 0x0, 0x81020, 0x1010101010101010, 0x201008, 0x0, 0x0, 0x0, 0x0, 0x4081020, 0x0, 0x1010101010101010, 0x0, 0x40201008, 0x0, 0x0, 0x204081020, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x8040201008, 0x10204081020, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x80402010, 0x2020202020202020, 0x1020408102040, 0x0, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x2020202020202020, 0xff00, 0xff00, 0x0, 0x0, 0x0, 0x0, 0x102040, 0x2020202020202020, 0x402010, 0x0, 0x0, 0x0, 0x0, 0x8102040, 0x0, 0x2020202020202020, 0x0, 0x80402010, 0x0, 0x0, 0x408102040, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x20408102040, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x1020408102040, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x804020, 0x4040404040404040, 0x102040810204080, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x4040404040404040, 0xff00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x204080, 0x4040404040404040, 0x804020, 0x0, 0x0, 0x0, 0x0, 0x10204080, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x810204080, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x40810204080, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x2040810204080, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x102040810204080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040, 0x8080808080808080, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0xff00, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x408000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20408000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x1020408000, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x81020408000, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x4081020408000, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x204081020408000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, },
{0x101010101010101, 0x0, 0x10204, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x10200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x101010101010101, 0x2010000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x402010000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x80402010000, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x10080402010000, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x2010080402010000, 0x0, 0x0, },
{0x0, 0x202020202020202, 0x0, 0x1020408, 0x0, 0x0, 0x0, 0x0, 0x4020100804020100, 0x202020202020202, 0x1020400, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff0000, 0x202020202020202, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x1020408, 0x202020202020202, 0x4020100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x804020100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x100804020100, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x20100804020100, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x4020100804020100, 0x0, },
{0x8040201008040201, 0x0, 0x404040404040404, 0x0, 0x102040810, 0x0, 0x0, 0x0, 0x0, 0x8040201008040200, 0x404040404040404, 0x102040800, 0x0, 0x0, 0x0, 0x0, 0xff0000, 0xff0000, 0x404040404040404, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x0, 0x2040810, 0x404040404040404, 0x8040201, 0x0, 0x0, 0x0, 0x0, 0x102040810, 0x0, 0x404040404040404, 0x0, 0x1008040201, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x201008040201, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x40201008040201, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x8040201008040201, },
{0x0, 0x80402010080402, 0x0, 0x808080808080808, 0x0, 0x10204081020, 0x0, 0x0, 0x0, 0x0, 0x80402010080400, 0x808080808080808, 0x10204081000, 0x0, 0x0, 0x0, 0xff0000, 0xff0000, 0xff0000, 0x808080808080808, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x0, 0x0, 0x4081020, 0x808080808080808, 0x10080402, 0x0, 0x0, 0x0, 0x0, 0x204081020, 0x0, 0x808080808080808, 0x0, 0x2010080402, 0x0, 0x0, 0x10204081020, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x402010080402, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x80402010080402, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x804020100804, 0x0, 0x1010101010101010, 0x0, 0x1020408102040, 0x0, 0x0, 0x0, 0x0, 0x804020100800, 0x1010101010101010, 0x1020408102000, 0x0, 0x0, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x1010101010101010, 0xff0000, 0xff0000, 0xff0000, 0x0, 0x0, 0x0, 0x8102040, 0x1010101010101010, 0x20100804, 0x0, 0x0, 0x0, 0x0, 0x408102040, 0x0, 0x1010101010101010, 0x0, 0x4020100804, 0x0, 0x0, 0x20408102040, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x804020100804, 0x1020408102040, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x8040201008, 0x0, 0x2020202020202020, 0x0, 0x102040810204080, 0x0, 0x0, 0x0, 0x0, 0x8040201000, 0x2020202020202020, 0x102040810204000, 0x0, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x2020202020202020, 0xff0000, 0xff0000, 0x0, 0x0, 0x0, 0x0, 0x10204080, 0x2020202020202020, 0x40201008, 0x0, 0x0, 0x0, 0x0, 0x810204080, 0x0, 0x2020202020202020, 0x0, 0x8040201008, 0x0, 0x0, 0x40810204080, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x2040810204080, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x102040810204080, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x80402010, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80402000, 0x4040404040404040, 0x204081020408000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x4040404040404040, 0xff0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20408000, 0x4040404040404040, 0x80402010, 0x0, 0x0, 0x0, 0x0, 0x1020408000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x81020408000, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x4081020408000, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x204081020408000, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x804020, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x804000, 0x8080808080808080, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40800000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040800000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x102040800000, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x8102040800000, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x408102040800000, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, },
{0x101010101010101, 0x0, 0x0, 0x1020408, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x1020400, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x1020000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x101010101010101, 0x201000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x40201000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x8040201000000, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x1008040201000000, 0x0, 0x0, 0x0, },
{0x0, 0x202020202020202, 0x0, 0x0, 0x102040810, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x102040800, 0x0, 0x0, 0x0, 0x0, 0x2010080402010000, 0x202020202020202, 0x102040000, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff000000, 0x202020202020202, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x102040810, 0x202020202020202, 0x402010000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x80402010000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x10080402010000, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x2010080402010000, 0x0, 0x0, },
{0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x10204081020, 0x0, 0x0, 0x4020100804020100, 0x0, 0x404040404040404, 0x0, 0x10204081000, 0x0, 0x0, 0x0, 0x0, 0x4020100804020000, 0x404040404040404, 0x10204080000, 0x0, 0x0, 0x0, 0x0, 0xff000000, 0xff000000, 0x404040404040404, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0, 0x204081020, 0x404040404040404, 0x804020100, 0x0, 0x0, 0x0, 0x0, 0x10204081020, 0x0, 0x404040404040404, 0x0, 0x100804020100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x20100804020100, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x4020100804020100, 0x0, },
{0x8040201008040201, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x1020408102040, 0x0, 0x0, 0x8040201008040200, 0x0, 0x808080808080808, 0x0, 0x1020408102000, 0x0, 0x0, 0x0, 0x0, 0x8040201008040000, 0x808080808080808, 0x1020408100000, 0x0, 0x0, 0x0, 0xff000000, 0xff000000, 0xff000000, 0x808080808080808, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x0, 0x0, 0x408102040, 0x808080808080808, 0x1008040201, 0x0, 0x0, 0x0, 0x0, 0x20408102040, 0x0, 0x808080808080808, 0x0, 0x201008040201, 0x0, 0x0, 0x1020408102040, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x40201008040201, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x8040201008040201, },
{0x0, 0x80402010080402, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x102040810204080, 0x0, 0x0, 0x80402010080400, 0x0, 0x1010101010101010, 0x0, 0x102040810204000, 0x0, 0x0, 0x0, 0x0, 0x80402010080000, 0x1010101010101010, 0x102040810200000, 0x0, 0x0, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x1010101010101010, 0xff000000, 0xff000000, 0xff000000, 0x0, 0x0, 0x0, 0x810204080, 0x1010101010101010, 0x2010080402, 0x0, 0x0, 0x0, 0x0, 0x40810204080, 0x0, 0x1010101010101010, 0x0, 0x402010080402, 0x0, 0x0, 0x2040810204080, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x80402010080402, 0x102040810204080, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x804020100804, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x804020100800, 0x0, 0x2020202020202020, 0x0, 0x204081020408000, 0x0, 0x0, 0x0, 0x0, 0x804020100000, 0x2020202020202020, 0x204081020400000, 0x0, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x2020202020202020, 0xff000000, 0xff000000, 0x0, 0x0, 0x0, 0x0, 0x1020408000, 0x2020202020202020, 0x4020100804, 0x0, 0x0, 0x0, 0x0, 0x81020408000, 0x0, 0x2020202020202020, 0x0, 0x804020100804, 0x0, 0x0, 0x4081020408000, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x204081020408000, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x8040201008, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040201000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040200000, 0x4040404040404040, 0x408102040800000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x4040404040404040, 0xff000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040800000, 0x4040404040404040, 0x8040201008, 0x0, 0x0, 0x0, 0x0, 0x102040800000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x8102040800000, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x408102040800000, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x80402010, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80402000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80400000, 0x8080808080808080, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0xff000000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4080000000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x204080000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x10204080000000, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x810204080000000, 0x0, 0x0, 0x0, 0x8080808080808080, },
{0x101010101010101, 0x0, 0x0, 0x0, 0x102040810, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x102040800, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x102040000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x102000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0x101010101010101, 0x20100000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x4020100000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x804020100000000, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x10204081020, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x10204081000, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x10204080000, 0x0, 0x0, 0x0, 0x0, 0x1008040201000000, 0x202020202020202, 0x10204000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff00000000, 0x202020202020202, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0x10204081020, 0x202020202020202, 0x40201000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x8040201000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x1008040201000000, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x1020408102040, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x1020408102000, 0x0, 0x0, 0x2010080402010000, 0x0, 0x404040404040404, 0x0, 0x1020408100000, 0x0, 0x0, 0x0, 0x0, 0x2010080402000000, 0x404040404040404, 0x1020408000000, 0x0, 0x0, 0x0, 0x0, 0xff00000000, 0xff00000000, 0x404040404040404, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0x0, 0x20408102040, 0x404040404040404, 0x80402010000, 0x0, 0x0, 0x0, 0x0, 0x1020408102040, 0x0, 0x404040404040404, 0x0, 0x10080402010000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x2010080402010000, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x102040810204080, 0x4020100804020100, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x102040810204000, 0x0, 0x0, 0x4020100804020000, 0x0, 0x808080808080808, 0x0, 0x102040810200000, 0x0, 0x0, 0x0, 0x0, 0x4020100804000000, 0x808080808080808, 0x102040810000000, 0x0, 0x0, 0x0, 0xff00000000, 0xff00000000, 0xff00000000, 0x808080808080808, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0x0, 0x0, 0x40810204080, 0x808080808080808, 0x100804020100, 0x0, 0x0, 0x0, 0x0, 0x2040810204080, 0x0, 0x808080808080808, 0x0, 0x20100804020100, 0x0, 0x0, 0x102040810204080, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x4020100804020100, 0x0, },
{0x8040201008040201, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x8040201008040200, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x204081020408000, 0x0, 0x0, 0x8040201008040000, 0x0, 0x1010101010101010, 0x0, 0x204081020400000, 0x0, 0x0, 0x0, 0x0, 0x8040201008000000, 0x1010101010101010, 0x204081020000000, 0x0, 0x0, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0x1010101010101010, 0xff00000000, 0xff00000000, 0xff00000000, 0x0, 0x0, 0x0, 0x81020408000, 0x1010101010101010, 0x201008040201, 0x0, 0x0, 0x0, 0x0, 0x4081020408000, 0x0, 0x1010101010101010, 0x0, 0x40201008040201, 0x0, 0x0, 0x204081020408000, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x8040201008040201, },
{0x0, 0x80402010080402, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x80402010080400, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80402010080000, 0x0, 0x2020202020202020, 0x0, 0x408102040800000, 0x0, 0x0, 0x0, 0x0, 0x80402010000000, 0x2020202020202020, 0x408102040000000, 0x0, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0x2020202020202020, 0xff00000000, 0xff00000000, 0x0, 0x0, 0x0, 0x0, 0x102040800000, 0x2020202020202020, 0x402010080402, 0x0, 0x0, 0x0, 0x0, 0x8102040800000, 0x0, 0x2020202020202020, 0x0, 0x80402010080402, 0x0, 0x0, 0x408102040800000, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, },
{0x0, 0x0, 0x804020100804, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x804020100800, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x804020100000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x804020000000, 0x4040404040404040, 0x810204080000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0x4040404040404040, 0xff00000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x204080000000, 0x4040404040404040, 0x804020100804, 0x0, 0x0, 0x0, 0x0, 0x10204080000000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x810204080000000, 0x0, 0x0, 0x4040404040404040, 0x0, },
{0x0, 0x0, 0x0, 0x8040201008, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x8040201000, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040200000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040000000, 0x8080808080808080, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0xff00000000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x408000000000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20408000000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x1020408000000000, 0x0, 0x0, 0x8080808080808080, },
{0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x10204081020, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x10204081000, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x10204080000, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x10204000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x10200000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x101010101010101, 0x2010000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x402010000000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x1020408102040, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x1020408102000, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x1020408100000, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x1020408000000, 0x0, 0x0, 0x0, 0x0, 0x804020100000000, 0x202020202020202, 0x1020400000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff0000000000, 0x202020202020202, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x1020408102040, 0x202020202020202, 0x4020100000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x804020100000000, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x102040810204080, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x102040810204000, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x102040810200000, 0x0, 0x0, 0x1008040201000000, 0x0, 0x404040404040404, 0x0, 0x102040810000000, 0x0, 0x0, 0x0, 0x0, 0x1008040200000000, 0x404040404040404, 0x102040800000000, 0x0, 0x0, 0x0, 0x0, 0xff0000000000, 0xff0000000000, 0x404040404040404, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x0, 0x2040810204080, 0x404040404040404, 0x8040201000000, 0x0, 0x0, 0x0, 0x0, 0x102040810204080, 0x0, 0x404040404040404, 0x0, 0x1008040201000000, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x204081020408000, 0x2010080402010000, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x204081020400000, 0x0, 0x0, 0x2010080402000000, 0x0, 0x808080808080808, 0x0, 0x204081020000000, 0x0, 0x0, 0x0, 0x0, 0x2010080400000000, 0x808080808080808, 0x204081000000000, 0x0, 0x0, 0x0, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x808080808080808, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x0, 0x0, 0x4081020408000, 0x808080808080808, 0x10080402010000, 0x0, 0x0, 0x0, 0x0, 0x204081020408000, 0x0, 0x808080808080808, 0x0, 0x2010080402010000, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x4020100804020100, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x4020100804020000, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x408102040800000, 0x0, 0x0, 0x4020100804000000, 0x0, 0x1010101010101010, 0x0, 0x408102040000000, 0x0, 0x0, 0x0, 0x0, 0x4020100800000000, 0x1010101010101010, 0x408102000000000, 0x0, 0x0, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x1010101010101010, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x0, 0x0, 0x0, 0x8102040800000, 0x1010101010101010, 0x20100804020100, 0x0, 0x0, 0x0, 0x0, 0x408102040800000, 0x0, 0x1010101010101010, 0x0, 0x4020100804020100, 0x0, },
{0x8040201008040201, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x8040201008040200, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x8040201008040000, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040201008000000, 0x0, 0x2020202020202020, 0x0, 0x810204080000000, 0x0, 0x0, 0x0, 0x0, 0x8040201000000000, 0x2020202020202020, 0x810204000000000, 0x0, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x2020202020202020, 0xff0000000000, 0xff0000000000, 0x0, 0x0, 0x0, 0x0, 0x10204080000000, 0x2020202020202020, 0x40201008040201, 0x0, 0x0, 0x0, 0x0, 0x810204080000000, 0x0, 0x2020202020202020, 0x0, 0x8040201008040201, },
{0x0, 0x80402010080402, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x80402010080400, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x80402010080000, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80402010000000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80402000000000, 0x4040404040404040, 0x1020408000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x4040404040404040, 0xff0000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20408000000000, 0x4040404040404040, 0x80402010080402, 0x0, 0x0, 0x0, 0x0, 0x1020408000000000, 0x0, 0x4040404040404040, 0x0, },
{0x0, 0x0, 0x804020100804, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x804020100800, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x804020100000, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x804020000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x804000000000, 0x8080808080808080, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0xff0000000000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x40800000000000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040800000000000, 0x0, 0x8080808080808080, },
{0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1020408102040, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x1020408102000, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x1020408100000, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x1020408000000, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x1020400000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x1020000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x101010101010101, 0x201000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x0, 0x102040810204080, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x102040810204000, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x102040810200000, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x102040810000000, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x102040800000000, 0x0, 0x0, 0x0, 0x0, 0x402010000000000, 0x202020202020202, 0x102040000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff000000000000, 0x202020202020202, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x102040810204080, 0x202020202020202, 0x402010000000000, 0x0, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x204081020408000, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x204081020400000, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x204081020000000, 0x0, 0x0, 0x804020100000000, 0x0, 0x404040404040404, 0x0, 0x204081000000000, 0x0, 0x0, 0x0, 0x0, 0x804020000000000, 0x404040404040404, 0x204080000000000, 0x0, 0x0, 0x0, 0x0, 0xff000000000000, 0xff000000000000, 0x404040404040404, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x0, 0x204081020408000, 0x404040404040404, 0x804020100000000, 0x0, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x408102040800000, 0x1008040201000000, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x408102040000000, 0x0, 0x0, 0x1008040200000000, 0x0, 0x808080808080808, 0x0, 0x408102000000000, 0x0, 0x0, 0x0, 0x0, 0x1008040000000000, 0x808080808080808, 0x408100000000000, 0x0, 0x0, 0x0, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x808080808080808, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x0, 0x0, 0x408102040800000, 0x808080808080808, 0x1008040201000000, 0x0, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x2010080402010000, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x2010080402000000, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x810204080000000, 0x0, 0x0, 0x2010080400000000, 0x0, 0x1010101010101010, 0x0, 0x810204000000000, 0x0, 0x0, 0x0, 0x0, 0x2010080000000000, 0x1010101010101010, 0x810200000000000, 0x0, 0x0, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x1010101010101010, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x0, 0x0, 0x0, 0x810204080000000, 0x1010101010101010, 0x2010080402010000, 0x0, 0x0, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x4020100804020100, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x4020100804020000, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x4020100804000000, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4020100800000000, 0x0, 0x2020202020202020, 0x0, 0x1020408000000000, 0x0, 0x0, 0x0, 0x0, 0x4020100000000000, 0x2020202020202020, 0x1020400000000000, 0x0, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x2020202020202020, 0xff000000000000, 0xff000000000000, 0x0, 0x0, 0x0, 0x0, 0x1020408000000000, 0x2020202020202020, 0x4020100804020100, 0x0, },
{0x8040201008040201, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x8040201008040200, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x8040201008040000, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x8040201008000000, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040201000000000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040200000000000, 0x4040404040404040, 0x2040800000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x4040404040404040, 0xff000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2040800000000000, 0x4040404040404040, 0x8040201008040201, },
{0x0, 0x80402010080402, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x80402010080400, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x80402010080000, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x80402010000000, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80402000000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80400000000000, 0x8080808080808080, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0xff000000000000, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4080000000000000, 0x8080808080808080, },
{0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x102040810204080, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x0, 0x102040810204000, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x0, 0x102040810200000, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x0, 0x102040810000000, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x0, 0x102040800000000, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x0, 0x102040000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0x102000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x101010101010101, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, },
{0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x0, 0x204081020408000, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x0, 0x204081020400000, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x0, 0x204081020000000, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x0, 0x204081000000000, 0x0, 0x0, 0x0, 0x0, 0x202020202020202, 0x0, 0x204080000000000, 0x0, 0x0, 0x0, 0x0, 0x201000000000000, 0x202020202020202, 0x204000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff00000000000000, 0x202020202020202, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, },
{0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x0, 0x408102040800000, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x0, 0x408102040000000, 0x0, 0x0, 0x0, 0x404040404040404, 0x0, 0x0, 0x408102000000000, 0x0, 0x0, 0x402010000000000, 0x0, 0x404040404040404, 0x0, 0x408100000000000, 0x0, 0x0, 0x0, 0x0, 0x402000000000000, 0x404040404040404, 0x408000000000000, 0x0, 0x0, 0x0, 0x0, 0xff00000000000000, 0xff00000000000000, 0x404040404040404, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, },
{0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x0, 0x810204080000000, 0x804020100000000, 0x0, 0x0, 0x808080808080808, 0x0, 0x0, 0x810204000000000, 0x0, 0x0, 0x804020000000000, 0x0, 0x808080808080808, 0x0, 0x810200000000000, 0x0, 0x0, 0x0, 0x0, 0x804000000000000, 0x808080808080808, 0x810000000000000, 0x0, 0x0, 0x0, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0x808080808080808, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, },
{0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x1008040201000000, 0x0, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x0, 0x0, 0x1008040200000000, 0x0, 0x0, 0x1010101010101010, 0x0, 0x0, 0x1020408000000000, 0x0, 0x0, 0x1008040000000000, 0x0, 0x1010101010101010, 0x0, 0x1020400000000000, 0x0, 0x0, 0x0, 0x0, 0x1008000000000000, 0x1010101010101010, 0x1020000000000000, 0x0, 0x0, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0x1010101010101010, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x2010080402010000, 0x0, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x2010080402000000, 0x0, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x2010080400000000, 0x0, 0x0, 0x2020202020202020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2010080000000000, 0x0, 0x2020202020202020, 0x0, 0x2040800000000000, 0x0, 0x0, 0x0, 0x0, 0x2010000000000000, 0x2020202020202020, 0x2040000000000000, 0x0, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0x2020202020202020, 0xff00000000000000, 0xff00000000000000, },
{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x4020100804020100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x4020100804020000, 0x0, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x4020100804000000, 0x0, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x4020100800000000, 0x0, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4020100000000000, 0x0, 0x4040404040404040, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4020000000000000, 0x4040404040404040, 0x4080000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0x4040404040404040, 0xff00000000000000, },
{0x8040201008040201, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x8040201008040200, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x8040201008040000, 0x0, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x8040201008000000, 0x0, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x8040201000000000, 0x0, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040200000000000, 0x0, 0x8080808080808080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8040000000000000, 0x8080808080808080, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0xff00000000000000, 0x8080808080808080, }};



/*************************************************


            GENERATING LEGAL MOVES


*************************************************/

/*
    PAWN MOVES
    * Pawns feature a lot of special cases like en passant and promotion
    * First we handle all enPassant moves and check if they are legal (i.e inline with possible pinners and checker rays)
    * Then we generate all pawn moves and check if they are legal (i.e inline with possible pinners and checker rays)
*/

void generatePawnMoves(std::vector<move> &movelist, Position position, Bitboard pinns, Bitboard checkerRays) { // TODO: PLAYTEST ENPASSANT
    Color sideToMove = position.getSideToMove();
    Bitboard pawns = position.getPieceBitboard(sideToMove == WHITE ? wPAWN : bPAWN);
    Bitboard enemy = position.getAllPiecesBitboard(sideToMove == WHITE ? BLACK : WHITE);
    Bitboard occupied = position.getOccupiedSquaresBitboard();
    Bitboard enPassant = position.getEnpassantSquare();
    Bitboard pins = pinns & pawns;
    pawns &= ~pinns; 

    Bitboard origins = 0;

    // handle en passant first
    if(enPassant){
        if(checkerRays){

            enPassant &= checkerRays;
            enPassant &= checkerRays;
        }
        Bitboard Eneast = sideToMove == WHITE ? pawnEastAttacks<BLACK>(enPassant,pawns | pins) : pawnEastAttacks<WHITE>(enPassant,pawns | pins);
        Bitboard Enwest = sideToMove == WHITE ? pawnWestAttacks<BLACK>(enPassant,pawns | pins) : pawnWestAttacks<WHITE>(enPassant,pawns | pins);
        // Super special case: discoverd check thru enPassant capture
        Bitboard removedPawn = sideToMove == WHITE ? enPassant << 8 : enPassant >> 8;
        int kingSquare = std::countr_zero(position.getPieceBitboard(sideToMove == WHITE ? wKING : bKING));
        int kingRank = kingSquare / 8;
        if(((getRookAttacks(kingSquare, occupied ^ (removedPawn | Enwest | Eneast)) & RANKS[kingRank]) & (position.getPieceBitboard(sideToMove == WHITE ? bROOK : wROOK) | position.getPieceBitboard(sideToMove == WHITE ? bQUEEN : wQUEEN))) && std::popcount(Eneast | Enwest) == 1){
            Eneast = 0;
            Enwest = 0;
        }

        if(Eneast){ // East enPassant possible
            int origin = std::countr_zero(Eneast);
            int target = std::countr_zero(enPassant);

            if(Eneast & pinns){ // Check if pinned
                Bitboard between = extendedRayBetween[origin][std::countr_zero(position.getPieceBitboard(sideToMove == WHITE ? wKING : bKING))];
                if(between & enPassant){
                    movelist.push_back(encodeMove(origin, target, EN_PASSANT));
                    
                }
            }
            else{
                movelist.push_back(encodeMove(origin, target, EN_PASSANT));
            }
        }
        if (Enwest){ // West enPassant possible
            int origin = std::countr_zero(Enwest);
            int target = std::countr_zero(enPassant);

            if(Enwest & pinns){ // Check if pinned
                Bitboard between = extendedRayBetween[origin][std::countr_zero(position.getPieceBitboard(sideToMove == WHITE ? wKING : bKING))];
                if(between & enPassant){
                    movelist.push_back(encodeMove(origin, target, EN_PASSANT));
                }
            }
            else{
                movelist.push_back(encodeMove(origin, target, EN_PASSANT));
            }

        }
        
    }

    Bitboard single = sideToMove == WHITE ? pawnSinglePush<WHITE>(pawns, occupied) : pawnSinglePush<BLACK>(pawns, occupied);
    Bitboard doublePush = sideToMove == WHITE ? pawnDoublePush<WHITE>(pawns, occupied) : pawnDoublePush<BLACK>(pawns, occupied);
    Bitboard east = sideToMove == WHITE ? pawnEastAttacks<WHITE>(pawns,enemy) : pawnEastAttacks<BLACK>(pawns,enemy);
    Bitboard west = sideToMove == WHITE ? pawnWestAttacks<WHITE>(pawns,enemy) : pawnWestAttacks<BLACK>(pawns,enemy);


    while (pins) {
        int pin = std::countr_zero(pins);
        Bitboard pinnedPiece = (1ULL << pin);
        Bitboard between = extendedRayBetween[pin][std::countr_zero(position.getPieceBitboard(sideToMove == WHITE ? wKING : bKING))];

        single |= sideToMove == WHITE ? pawnSinglePush<WHITE>(pinnedPiece, occupied) & between: pawnSinglePush<BLACK>(pinnedPiece, occupied) & between;
        doublePush |= sideToMove == WHITE ? pawnDoublePush<WHITE>(pinnedPiece, occupied) & between: pawnDoublePush<BLACK>(pinnedPiece, occupied) & between;
        east |= sideToMove == WHITE ? pawnEastAttacks<WHITE>(pinnedPiece,enemy) & between: pawnEastAttacks<BLACK>(pinnedPiece,enemy) & between;
        west |= sideToMove == WHITE ? pawnWestAttacks<WHITE>(pinnedPiece,enemy) & between: pawnWestAttacks<BLACK>(pinnedPiece,enemy) & between;

        pins ^= (1ULL << pin);
    }

    if (checkerRays) {
        single &= checkerRays;
        doublePush &= checkerRays;
        east &= checkerRays;
        west &= checkerRays;
    }

    

    

    origins = sideToMove == WHITE ? (single << 8) : (single >> 8);
    while (origins && single) {
        int origin = std::countr_zero(origins);
        int target = std::countr_zero(single);
        origins ^= (1ULL << origin);
        single ^= (1ULL << target);
        movelist.push_back(encodeMove(origin, target, sideToMove == WHITE ? (target < 8 ? PROMOTON : QUIET) : (target > 55 ? PROMOTON : QUIET)));
    }

    origins = sideToMove == WHITE ? (doublePush << 16) : (doublePush >> 16);
    while (origins && doublePush) {
        int origin = std::countr_zero(origins);
        int target = std::countr_zero(doublePush);
        origins ^= (1ULL << origin);
        doublePush ^= (1ULL << target);
        movelist.push_back(encodeMove(origin, target, DOUBLE_PAWN_PUSH));
    }

    origins = sideToMove == WHITE ? (east << 7) : (east >> 9);
    while (origins && east) {
        int origin = std::countr_zero(origins);
        int target = std::countr_zero(east);
        origins ^= (1ULL << origin);
        east ^= (1ULL << target);
        movelist.push_back(encodeMove(origin, target, sideToMove == WHITE ? (target < 8 ? PROMOTION_CAPTURE : CAPTURE) : (target > 55 ? PROMOTION_CAPTURE : CAPTURE)));
    }

    origins = sideToMove == WHITE ? (west << 9) : (west >> 7);
    while (origins && west) {
        int origin = std::countr_zero(origins);
        int target = std::countr_zero(west);
        origins ^= (1ULL << origin);
        west ^= (1ULL << target);
        movelist.push_back(encodeMove(origin, target, sideToMove == WHITE ? (target < 8 ? PROMOTION_CAPTURE : CAPTURE) : (target > 55 ? PROMOTION_CAPTURE : CAPTURE)));
    }
}

/*
    KNIGHT MOVE GENERATION
    * Special case for pinned pieces. Pinned Knights can never move at all since no move can ever stay on the ray between the king and the pinned piece
*/
void generateKnightMoves(std::vector<move> &movelist, Position position, Bitboard pinns, Bitboard checkerRays){
    Color sideToMove = position.getSideToMove();
    Bitboard knights = position.getPieceBitboard(sideToMove == WHITE ? wKNIGHT : bKNIGHT) & ~pinns;
    
    while (knights) {
        int origin = std::countr_zero(knights);
        Bitboard targets = KNIGHT_ATTACKS[origin] & ~position.getAllPiecesBitboard(sideToMove);
        if (checkerRays) {
            targets &= checkerRays;
        }
        while (targets) {
            int target = std::countr_zero(targets);
            targets ^= (1ULL << target);
            movelist.push_back(encodeMove(origin, target, position.getPieceType(target) == NO_PIECE ? QUIET : CAPTURE));
        }
        knights ^= (1ULL << origin);
    }
}


/*
    BISHOP MOVE GENERATION
    * Generate attackboards by magic bitboard hasing
    * Only allow moves on the checking ray if there is a checking ray
    * For pinned pieces, only allow moves on the ray between the king and the pinned piece
*/
void generateBishopMoves(std::vector<move> &movelist, Position position, Bitboard pinns, Bitboard checkerRays){
    Color sideToMove = position.getSideToMove();
    Bitboard bishops = position.getPieceBitboard(sideToMove == WHITE ? wBISHOP : bBISHOP);
    Bitboard occupied = position.getOccupiedSquaresBitboard();
    pinns = bishops & pinns;
    bishops &= ~pinns;

    while (bishops) {
        int origin = std::countr_zero(bishops);
        Bitboard targets = getBishopAttacks(origin, occupied) & ~position.getAllPiecesBitboard(sideToMove);
        if (checkerRays) {
            targets &= checkerRays;
        }
        while (targets) {
            int target = std::countr_zero(targets);
            targets ^= (1ULL << target);
            movelist.push_back(encodeMove(origin, target, position.getPieceType(target) == NO_PIECE ? QUIET : CAPTURE));
        }
        bishops ^= (1ULL << origin);
    }

    while (pinns) {
        int origin = std::countr_zero(pinns);
        Bitboard targets = getBishopAttacks(origin, occupied) & ~position.getAllPiecesBitboard(sideToMove);
        targets &= extendedRayBetween[origin][std::countr_zero(position.getPieceBitboard(sideToMove == WHITE ? wKING : bKING))];
        if (checkerRays) {
            targets &= checkerRays;
        }
        while (targets) {
            int target = std::countr_zero(targets);
            targets ^= (1ULL << target);
            movelist.push_back(encodeMove(origin, target, position.getPieceType(target) == NO_PIECE ? QUIET : CAPTURE));
        }
        pinns ^= (1ULL << origin);
    }
}

/*
    ROOK MOVE GENERATION
    * Generate attackboards by magic bitboard hasing
    * Only allow moves on the checking ray if there is a checking ray
    * For pinned pieces, only allow moves on the ray between the king and the pinned piece
    * 
    * Pretty much identical to bishop move generation
*/
void generateRookMoves(std::vector<move> &movelist, Position position, Bitboard pinns, Bitboard checkerRays){
    Color sideToMove = position.getSideToMove();
    Bitboard rooks = position.getPieceBitboard(sideToMove == WHITE ? wROOK : bROOK);
    Bitboard occupied = position.getOccupiedSquaresBitboard();
    pinns = rooks & pinns;
    rooks &= ~pinns;

    while (rooks) {
        int origin = std::countr_zero(rooks);
        Bitboard targets = getRookAttacks(origin, occupied) & ~position.getAllPiecesBitboard(sideToMove);
        if (checkerRays) {
            targets &= checkerRays;
        }
        while (targets) {
            int target = std::countr_zero(targets);
            targets ^= (1ULL << target);
            movelist.push_back(encodeMove(origin, target, position.getPieceType(target) == NO_PIECE ? QUIET : CAPTURE));
        }
        rooks ^= (1ULL << origin);
    }

    while (pinns) {
        int origin = std::countr_zero(pinns);
        Bitboard targets = getRookAttacks(origin, occupied) & ~position.getAllPiecesBitboard(sideToMove);
        targets &= extendedRayBetween[origin][std::countr_zero(position.getPieceBitboard(sideToMove == WHITE ? wKING : bKING))];
        if (checkerRays) {
            targets &= checkerRays;
        }
        while (targets) {
            int target = std::countr_zero(targets);
            targets ^= (1ULL << target);
            movelist.push_back(encodeMove(origin, target, position.getPieceType(target) == NO_PIECE ? QUIET : CAPTURE));
        }
        pinns ^= (1ULL << origin);
    }
}

/*
    QUEEN MOVE GENERATION
    * Generate attackboards by magic bitboard hasing
    * same as rook and bishop move generation combined
*/
void generateQueenMoves(std::vector<move> &movelist, Position position, Bitboard pinns, Bitboard checkerRays){
    Color sideToMove = position.getSideToMove();
    Bitboard queens = position.getPieceBitboard(sideToMove == WHITE ? wQUEEN : bQUEEN);
    Bitboard occupied = position.getOccupiedSquaresBitboard();
    pinns = queens & pinns;
    queens &= ~pinns;

    while (queens) {
        int origin = std::countr_zero(queens);
        Bitboard targets = (getRookAttacks(origin, occupied) | getBishopAttacks(origin, occupied))& ~position.getAllPiecesBitboard(sideToMove);
        if (checkerRays) {
            targets &= checkerRays;
        }
        while (targets) {
            int target = std::countr_zero(targets);
            targets ^= (1ULL << target);
            movelist.push_back(encodeMove(origin, target, position.getPieceType(target) == NO_PIECE ? QUIET : CAPTURE));
        }
        queens ^= (1ULL << origin);
    }

    while (pinns) {
        int origin = std::countr_zero(pinns);
        Bitboard targets = (getRookAttacks(origin, occupied) | getBishopAttacks(origin, occupied)) & ~position.getAllPiecesBitboard(sideToMove);
        targets &= extendedRayBetween[origin][std::countr_zero(position.getPieceBitboard(sideToMove == WHITE ? wKING : bKING))];
        if (checkerRays) {
            targets &= checkerRays;
        }
        while (targets) {
            int target = std::countr_zero(targets);
            targets ^= (1ULL << target);
            movelist.push_back(encodeMove(origin, target, position.getPieceType(target) == NO_PIECE ? QUIET : CAPTURE));
        }
        pinns ^= (1ULL << origin);
    }
}

/*
    KING MOVE GENERATION
    * Generate attackboard for opponent pieces
    * Allow only moves that don't put the king on square that is attacked by opponent
    * Generate castling moves if possible
*/
void generateKingMoves(std::vector<move> &movelist, Position position, Bitboard oppAttacks){ // TODO: CASTELING MIGHT BE BROKEN
    Color sideToMove = position.getSideToMove();
    Bitboard king = position.getPieceBitboard(sideToMove == WHITE ? wKING : bKING);
    Bitboard occupied = position.getOccupiedSquaresBitboard();

    int origin = std::countr_zero(king);
    Bitboard targets = (kingAttacks[origin] & ~position.getAllPiecesBitboard(sideToMove)) & ~oppAttacks;
    while (targets) {
        int target = std::countr_zero(targets);
        targets ^= (1ULL << target);
        movelist.push_back(encodeMove(origin, target, position.getPieceType(target) == NO_PIECE ? QUIET : CAPTURE));
    }

    if(oppAttacks & king) {return;}

    uint8_t castelingRights = position.getCastlingRights();

    if (sideToMove == WHITE){
        if((castelingRights & WHITE_OO) != 0 && !(oppAttacks & 0b01110000'00000000'00000000'00000000'00000000'00000000'00000000'00000000) && !(occupied & 0b01100000'00000000'00000000'00000000'00000000'00000000'00000000'00000000)){
            movelist.push_back(encodeMove(E8, G8, CASTLING));
            //std::cout << "WOO" << std::endl;
        }
        if((castelingRights & WHITE_OOO) != 0 && !(oppAttacks & 0b00011100'00000000'00000000'00000000'00000000'00000000'00000000'00000000) && !(occupied & 0b00001110'00000000'00000000'00000000'00000000'00000000'00000000'00000000)){
            movelist.push_back(encodeMove(E8, C8, CASTLING));
            //std::cout << "WOOO" << std::endl;
        }
    }else {
        if((castelingRights & BLACK_OO) != 0 && !(oppAttacks & 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'01110000) && !(occupied & 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'01100000)){
            movelist.push_back(encodeMove(E1, G1, CASTLING));
            //std::cout << "BOO" << std::endl;
        }
        if((castelingRights & BLACK_OOO) != 0 && !(oppAttacks & 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00011100) && !(occupied & 0b00000000'00000000'00000000'00000000'00000000'00000000'00000000'00001110)){
            movelist.push_back(encodeMove(E1, C1, CASTLING));
            //std::cout << "BOOO" << std::endl;
        }
    }

    

}

/*
    HELPER FUNCTION TO GENERATE ATTACKBOARDS FOR ALL PIECES
*/
Bitboard getAttackboard(Position pos, Color generatingside){
    Bitboard attackboard = 0;
    Color oppside = generatingside == WHITE ? BLACK : WHITE;

    Bitboard pawns = pos.getPieceBitboard(generatingside == WHITE ? wPAWN : bPAWN);
    Bitboard knights = pos.getPieceBitboard(generatingside == WHITE ? wKNIGHT : bKNIGHT);
    Bitboard bishops = pos.getPieceBitboard(generatingside == WHITE ? wBISHOP : bBISHOP);
    Bitboard rooks = pos.getPieceBitboard(generatingside == WHITE ? wROOK : bROOK);
    Bitboard queens = pos.getPieceBitboard(generatingside == WHITE ? wQUEEN : bQUEEN);
    Bitboard king = pos.getPieceBitboard(generatingside == WHITE ? wKING : bKING);
    Bitboard enPassant = 0;

    Bitboard oppKing = pos.getPieceBitboard(oppside == WHITE ? wKING : bKING);

    Bitboard occupied = (pos.getOccupiedSquaresBitboard());

    attackboard |= generatingside == WHITE ? (pawnEastAttacks<WHITE>(pawns,0xff'ff'ff'ff'ff'ff'ff'ff) | pawnWestAttacks<WHITE>(pawns,0xff'ff'ff'ff'ff'ff'ff'ff)) : (pawnEastAttacks<BLACK>(pawns,0xff'ff'ff'ff'ff'ff'ff'ff) | pawnWestAttacks<BLACK>(pawns,0xff'ff'ff'ff'ff'ff'ff'ff));
    occupied &= ~oppKing;

    if((enPassant = pos.getEnpassantSquare())){
        attackboard |= generatingside == WHITE ? (pawnEastAttacks<WHITE>(pawns,enPassant) | pawnWestAttacks<WHITE>(pawns,enPassant)) : (pawnEastAttacks<BLACK>(pawns,enPassant) | pawnWestAttacks<BLACK>(pawns,enPassant));
    }


    while (knights) {
        int square = std::countr_zero(knights);
        knights ^= (1ULL << square);
        attackboard |= KNIGHT_ATTACKS[square];
    }

    while (bishops) {
        int square = std::countr_zero(bishops);
        bishops ^= (1ULL << square);
        attackboard |= getBishopAttacks(square, occupied);
    }

    while (rooks) {
        int square = std::countr_zero(rooks);
        rooks ^= (1ULL << square);
        attackboard |= getRookAttacks(square, occupied);
    }

    while (queens) {
        int square = std::countr_zero(queens);
        queens ^= (1ULL << square);
        attackboard |= (getRookAttacks(square, occupied) | getBishopAttacks(square, occupied));
    }

    while (king) {
        int square = std::countr_zero(king);
        king ^= (1ULL << square);
        attackboard |= kingAttacks[square];
    }

    return attackboard;
}


/* 
    HELPER FUNCTIONS TO GENERATE PINNED PIECES AND CHECKER BITBOARDS
*/

// Xray attacking function gets all rays from king to closest attacing piece by sort of xraying through one layer of own pieces
Bitboard xrayRookAttacks(int square, Bitboard ownPieces, Bitboard occupied){
    Bitboard xray = (getRookAttacks(square, occupied) & ownPieces); // Gets all pieces that are in the way of the king and keep only own pieces 
    return getRookAttacks(square, (occupied ^ xray));
}

Bitboard xrayBishopAttacks(int square, Bitboard ownPieces, Bitboard occupied){
    Bitboard xray = (getBishopAttacks(square, occupied) & ownPieces); 
    return getBishopAttacks(square, (occupied ^ xray));
}

// Get pinns Function returns a bitboard of all currently pinned pieces
Bitboard getPinns(Position pos, Color sideToMove){
    Bitboard pinns = 0;
    Bitboard ownPieces = pos.getAllPiecesBitboard(sideToMove);
    int kingSquare = std::countr_zero(pos.getPieceBitboard(sideToMove == WHITE ? wKING : bKING));

    Bitboard pinners = (xrayRookAttacks(kingSquare, ownPieces, pos.getOccupiedSquaresBitboard()) 
                            & (pos.getPieceBitboard(sideToMove == WHITE ? bROOK : wROOK) | pos.getPieceBitboard(sideToMove == WHITE ? bQUEEN : wQUEEN)))
                            | (xrayBishopAttacks(kingSquare, ownPieces, pos.getOccupiedSquaresBitboard())
                            & (pos.getPieceBitboard(sideToMove == WHITE ? bBISHOP : wBISHOP) | pos.getPieceBitboard(sideToMove == WHITE ? bQUEEN : wQUEEN)));

    while(pinners){
        int pinSquare = std::countr_zero(pinners);
        pinners ^= (1ULL << pinSquare);
        Bitboard pinRay = rayBetween[kingSquare][pinSquare];
        if((pinRay & ownPieces)){
            pinns |= pinRay & ownPieces;
        }
    }
    return pinns;
}

// Get checkers function returns a bitboard of all currently checking pieces
Bitboard getCheckers(Position pos, Color sideToMove){
    Bitboard checkers = 0;
    int kingSquare = std::countr_zero(pos.getPieceBitboard(sideToMove == WHITE ? wKING : bKING));

    Bitboard slidingCheckers = (getRookAttacks(kingSquare, pos.getOccupiedSquaresBitboard()) 
                            & (pos.getPieceBitboard(sideToMove == WHITE ? bROOK : wROOK) | pos.getPieceBitboard(sideToMove == WHITE ? bQUEEN : wQUEEN)))
                            | (getBishopAttacks(kingSquare, pos.getOccupiedSquaresBitboard())
                            & (pos.getPieceBitboard(sideToMove == WHITE ? bBISHOP : wBISHOP) | pos.getPieceBitboard(sideToMove == WHITE ? bQUEEN : wQUEEN)));

    checkers |= (slidingCheckers | (KNIGHT_ATTACKS[kingSquare] & pos.getPieceBitboard(sideToMove == WHITE ? bKNIGHT : wKNIGHT)));

    if (sideToMove == WHITE){
        checkers |= ((pawnEastAttacks<WHITE>(pos.getPieceBitboard(wKING),pos.getPieceBitboard(bPAWN))) | (pawnWestAttacks<WHITE>(pos.getPieceBitboard(wKING),pos.getPieceBitboard(bPAWN))));
    } else {
        checkers |= ((pawnEastAttacks<BLACK>(pos.getPieceBitboard(bKING),pos.getPieceBitboard(wPAWN))) | (pawnWestAttacks<BLACK>(pos.getPieceBitboard(bKING),pos.getPieceBitboard(wPAWN))));
    }

    return checkers;
}

/*
    MOVE GENERATION FUNCTION
    * This function generates all legal moves for the current position
*/



std::vector<move> generateLegalMoves(Position &pos){
    if(pos.getStalemate() || pos.getCheckmate())
        return {};

    pos.updateAllPiecesBitboard();

    Bitboard pins = getPinns(pos, pos.getSideToMove());
    Bitboard checkers = getCheckers(pos, pos.getSideToMove());
    int numCheckers = std::popcount(checkers);
    Bitboard checkerRays = 0;



    while (checkers){ // get all checker rays or single squares if knight to only generate moves that block check or capture the checker
        int checkerSquare = std::countr_zero(checkers);
        if(pos.getPieceType(checkerSquare) == (pos.getSideToMove() == WHITE ? wKNIGHT : bKNIGHT))
            checkerRays |= (1ULL << checkerSquare);
        else
            checkerRays |= rayBetween[std::countr_zero(pos.getPieceBitboard(pos.getSideToMove() == WHITE ? wKING : bKING))][checkerSquare] | (1ULL << checkerSquare);
        checkers ^= (1ULL << checkerSquare);
        if(pos.getEnpassantSquare())
            checkerRays |= pos.getEnpassantSquare();
    }


    Bitboard attackboard = getAttackboard(pos, pos.getSideToMove() == WHITE ? BLACK : WHITE);
    std::vector<move> movelist;

    if (numCheckers > 1){ // If there is more than one checker, only king moves are legal
        generateKingMoves(movelist,pos,attackboard);
    }
    else{
        generatePawnMoves(movelist,pos,pins,checkerRays);
        generateKnightMoves(movelist,pos,pins,checkerRays);
        generateBishopMoves(movelist,pos,pins,checkerRays);
        generateRookMoves(movelist,pos,pins,checkerRays);
        generateQueenMoves(movelist,pos,pins,checkerRays);
        generateKingMoves(movelist,pos,attackboard);
    }

    if(movelist.size() == 0){ // If there are no legal moves, check if the king is in check or stalemate
        if(numCheckers > 0)
            pos.setCheckmate(true);
        else
            pos.setStalemate(true);
    }
    else{
        pos.setCheckmate(false);
        pos.setStalemate(false);
    }

    return movelist;
}

//* HELPERS
bool isSquareAttacked(int sq, Position pos){
    Color side = pos.getSideToMove();
    Color opp = side == WHITE ? BLACK : WHITE;

    if(side == WHITE && pawnAttacks<BLACK>(pos.getPieceBitboard(opp == WHITE ? wPAWN : bPAWN), pos.getAllPiecesBitboard(side)) & (1ULL << sq)) return true;

    else if ( side == BLACK && pawnAttacks<WHITE>(pos.getPieceBitboard(opp == WHITE ? wPAWN : bPAWN), pos.getAllPiecesBitboard(side)) & (1ULL << sq)) return true;

    else if (KNIGHT_ATTACKS[sq] & pos.getPieceBitboard(side == WHITE ? bKNIGHT : wKNIGHT)) return true;

    else if (getRookAttacks(sq,pos.getOccupiedSquaresBitboard()) & (pos.getPieceBitboard(side == WHITE ? bROOK : wROOK) | pos.getPieceBitboard(side == WHITE ? bQUEEN : wQUEEN))) return true;

    else if (getBishopAttacks(sq,pos.getOccupiedSquaresBitboard()) & (pos.getPieceBitboard(side == WHITE ? bROOK : wROOK) | pos.getPieceBitboard(side == WHITE ? bQUEEN : wQUEEN))) return true;
    
    else if (kingAttacks[sq] & pos.getPieceBitboard(side == WHITE ? bKING: wKING)) return true;

    return false;

}
    